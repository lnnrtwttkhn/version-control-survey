note_start:
  class: label_align_left
  type: note
  name: Note_start
  label: |
   ## Command line exercises
   This survey will be about the [Command Line chapter](https://lennartwittkuhn.com/version-control-book/chapters/command-line.html) from the book ["Version Control of Code and Data"](https://lennartwittkuhn.com/version-control-book/).
note_4:
  class: label_align_left
  type: note
  name: note_4
  label: |
    ### Moving around
moving_around_1:
  type: text
  class: |
    answer_below_label
  name: moving_around_1 
  label: |
    If you are not already in the Downloads folder, navigate to it first.
    Next, switch from your current location, the Downloads folder, to the Documents folder in one command, using the `~` symbol in the path.
    Which command did you use?
moving_around_2:
  type: text
  class: |
    answer_below_label
  name: moving_around_2 
  label: |
    Where does the following command place you on your system? 
    ```{bash}
    cd ~/../../..
    ```
note_hiddenfiles:
  class: label_align_left
  type: note
  name: note_hiddenfiles
  label: |
    ### Hidden files
    **Please navigate to your document folder and list all files, including the hidden ones**
hidden_files_5:
  type: text
  class: |
    answer_below_label
  name: hidden_files_5
  label: |
    What command do you use to list hidden files in a folder?
hidden_files_1:
  type: mc_button
  class: |
    answer_below_label
    mc_vertical
  name: hidden_files_1
  optional: "*"
  label: |
    Are there more hidden files and folders than you expected?
  choice1: "Yes"
  choice2: "No"
hidden_files_2:
  optional: "*"
  type: mc_button
  class: |
    answer_below_label
    mc_vertical
  name: hidden_files_2
  label: |
    Did you notice something about the names of the hidden files?
  choice1: "Yes"
  choice2: "No"
hidden_files_3:
  optional: "*"
  type: text
  class: |
    answer_below_label
  name: hidden_files_3
  label: |
    What did you notice about the names of the hidden files?
  showif: hidden_files_2 == 1
hidden_files_4:
  optional: "*"
  type: mc_button
  class: |
    answer_below_label
    mc_vertical
  name: hidden_files_4
  label: |
    Are there directories with more hidden folders than others?
  choice1: "Yes"
  choice2: "No"
note_3:
  class: label_align_left
  type: note
  name: note_3
  label: |
    ### Using flags
using_flags_1:
  type: text
  class: |
    answer_below_label
  name: using_flags_1 
  label: |
    Obtain the usage information for `ls`. What is a flag that you can use to arrange the output according to date modified?
using_flags_2:
  optional: "*"
  type: text
  class: |
    answer_below_label
  name: using_flags_2
  label: |
    By convention flags that are full words use a double dash `--` and flags are a single letter have a singe dash `-`. Why must this be the case?
note_1:
  class: label_align_left
  type: note
  name: note_1
  label: |
    ### Combining arguments and flags
combining_flags:
  type: text
  class: |
    answer_below_label
  name: combining_flags 
  label: |
    Create a command that lists all the contents of your Documents folder in long format.
note_manipulating:
  class: label_align_left
  type: note
  name: note_manipulating
  label: |
    ### Manipulating the file system
creating_file:
  type: text
  class: |
    answer_below_label
  name: creating_file 
  label: |
   How can you create a new empty file using the command line? Provide an example.
creating_folder:
  type: text
  class: |
    answer_below_label
  name: creating_folder 
  label: |
   What command is used to create a new folder called "newproject" in the command line?
wildcards:
  type: textarea
  class: |
    answer_below_label
    big-textarea
  name: wildcards
  label: |
    What is the purpose of using wildcards, such as *, in the command line? Give an example of how wildcards can be used..
bonus:
  type: textarea
  class: |
    answer_below_label
    big-textarea
  name: bonus
  label: |
    **Bonus question**
    *You are in a directory containing multiple text files with various extensions, including .txt, .md, and .docx.*
    *You want to move all the .txt files to a subdirectory named "text_files" while keeping the other file types in the current directory.*
    *Write a series of command-line commands to accomplish this task, including creating the "text_files" subdirectory.*
    *Explain each step in your solution.*
next_page_2:
  type: submit
  name: next_page_2
  label: |
    End quiz and see sample answers
feedback: 
  class: label_align_left
  type: note
  name: feedback
  label: |
    ## Command line exercises
    #### Moving around
    
    *Switch from your current location, the Downloads folder, to the Documents folder in one command, using the `~` symbol in the path.*
    *Which command did you use?*
    **Your answer:**
    `r moving_around_1 ` 
    **Sample answer:**
    ```bash cd ~/Documents```
    
    *Where does the following command place you on your system?* 
    ```bash
    cd ~/../../..
    ```
    **Your answer:** 
    `r moving_around_2` 
    **Sample answer:**  
    Root directory of your system, which is typically represented as /.
    
    #### Hidden files
    *What did you notice about the names of the hidden files?*
    **Your answer:**
    `r hidden_files_3` 
    **Sample answer:**
     Hidden files and directories will have names that start with a dot (.).
    
    *What command do you use to list hidden files in a folder?*
    **Your answer:** 
    `r hidden_files_5` 
    **Sample answer:**
    ```bash ls -a ```
    
    #### Using flags
    
    *Obtain the usage information for `ls`. What is a flag that you can use to arrange the output according to date modified?*
    Your answer: 
    `r using_flags_1 ` 
    **Sample answer:**  
    1. Usage Information:
    ```bash ls --help```
    2. Arranging output according to date modified:
    ```bash ls -lt ```
    
    *By convention flags that are full words use a double dash `--` and flags are a single letter have a singe dash `-`. Why must this be the case?*
    **Your answer:** 
    `r using_flags_2` 
    **Sample answer:**
    Readibility, avoiding ambiguity, consistency
    
    #### Combining arguments and flags
    
    *Create a command that lists all the contents of your Documents folder in long format*
    **Your answer:**
    `r combining_flags ` 
    **Sample answer:**
    ```bash ls -a -l ``` or ```bash ls -al ```
    
    #### Manipulating the file system
    
    *How can you create a new empty file using the command line? Provide an example.*
    **Your answer:**
    `r creating_file` 
    **Sample answer:**
    ```bash touch example.txt```
    
    *What command is used to create a new folder called "newproject" in the command line?*
    **Your answer:**
    `r creating_folder` 
    **Sample answer:** 
    ```bash mkdir newproject```
    
    *What is the purpose of using wildcards, such as `*`, in the command line?*
    *Give an example of how wildcards can be used..*
    **Your answer:**
    `r wildcards` 
    **Sample answer:** 
    Wildcards, such as "*", in the command line are used to represent one or more characters, allowing you to match multiple files or directories based on a pattern. 
    They are useful for performing operations on multiple files or directories simultaneously.
    E.g. to list all files in your current directory that have a ".txt" extension.
    ```bash ls *.txt```
    
    **Bonus question:**
    *You are in a directory containing multiple text files with various extensions, including .txt, .md, and .docx.*
    *You want to move all the .txt files to a subdirectory named "text_files" while keeping the other file types in the current directory.*
    *Write a series of command-line commands to accomplish this task, including creating the "text_files" subdirectory.*
    *Explain each step in your solution.*
    **Your answer:**
    `r bonus`
    **Sample answer:**
    1. Creating "text_files" subdirectory.
     ```bash mkdir text_files```
    2. Moving all the .txt files to the "text_files" subdirectory.
    ```bash mv *.txt text_files```
next_page_5:
  type: submit
  name: next_page_5
  label: |
    Close feedback
